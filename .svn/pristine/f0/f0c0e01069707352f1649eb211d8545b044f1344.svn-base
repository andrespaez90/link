package com.omni.support.ble.session.sub

import com.omni.support.ble.core.*
import com.omni.support.ble.link.abde.ABDELink
import com.omni.support.ble.profile.sub.BloomProfileManager
import com.omni.support.ble.protocol.*
import com.omni.support.ble.protocol.bloom.BloomPack
import com.omni.support.ble.protocol.bloom.BloomPackAdapter
import com.omni.support.ble.protocol.scooter.ScooterPack
import com.omni.support.ble.session.BaseBuilder
import com.omni.support.ble.session.BaseSession

/**
 * @author 邱永恒
 *
 * @time 2019/8/6 17:48
 *
 * @desc 钢缆锁会话
 *
 */
class BloomSession(build: BaseBuilder<BloomSession>) : BaseSession(
    ABDELink(build.profileManager(BloomProfileManager()).packAdapter(BloomPackAdapter())),
    build
) {

    override fun initConfig() {
        sessionListener?.onReady()
    }

    override fun send(command: ICommand<*>): IResponse {
        val cmd = if (command.getResponseCmd() == 0) command.getCmd() else command.getResponseCmd()
        val response = getResponse(cmd)
        response.reset()

        when (command) {
            is Command -> {
                val pack = ScooterPack()
                pack.key = key
                pack.cmd = command.getCmd()
                pack.payload = command.getData()
                link.sendTo(pack)
            }
        }

        return response
    }

    override fun onReceived(pack: IPack) {
        when (pack) {
            is BloomPack -> {
                val response = getResponse(pack.cmd)
                response.setResult(pack.payload)
            }
        }
    }

    class Builder : BaseBuilder<BloomSession>() {
        override fun build(): BloomSession =
            BloomSession(this)
    }
}